/**
 */
package org.nasdanika.vinci.bootstrap.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.nasdanika.vinci.bootstrap.util.BootstrapAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BootstrapItemProviderAdapterFactory extends BootstrapAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BootstrapItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerItemProvider containerItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerAdapter() {
		if (containerItemProvider == null) {
			containerItemProvider = new ContainerItemProvider(this);
		}

		return containerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Row} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RowItemProvider rowItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Row}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRowAdapter() {
		if (rowItemProvider == null) {
			rowItemProvider = new RowItemProvider(this);
		}

		return rowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Card} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardItemProvider cardItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Card}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardAdapter() {
		if (cardItemProvider == null) {
			cardItemProvider = new CardItemProvider(this);
		}

		return cardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Tag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagItemProvider tagItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Tag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagAdapter() {
		if (tagItemProvider == null) {
			tagItemProvider = new TagItemProvider(this);
		}

		return tagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Div} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivItemProvider divItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Div}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivAdapter() {
		if (divItemProvider == null) {
			divItemProvider = new DivItemProvider(this);
		}

		return divItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.LinkActionGroupItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkActionGroupItemItemProvider linkActionGroupItemItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.LinkActionGroupItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkActionGroupItemAdapter() {
		if (linkActionGroupItemItemProvider == null) {
			linkActionGroupItemItemProvider = new LinkActionGroupItemItemProvider(this);
		}

		return linkActionGroupItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.ContentActionGroupItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentActionGroupItemItemProvider contentActionGroupItemItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.ContentActionGroupItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentActionGroupItemAdapter() {
		if (contentActionGroupItemItemProvider == null) {
			contentActionGroupItemItemProvider = new ContentActionGroupItemItemProvider(this);
		}

		return contentActionGroupItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Alert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlertItemProvider alertItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Alert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlertAdapter() {
		if (alertItemProvider == null) {
			alertItemProvider = new AlertItemProvider(this);
		}

		return alertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Badge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BadgeItemProvider badgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Badge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBadgeAdapter() {
		if (badgeItemProvider == null) {
			badgeItemProvider = new BadgeItemProvider(this);
		}

		return badgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.ButtonGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonGroupItemProvider buttonGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.ButtonGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonGroupAdapter() {
		if (buttonGroupItemProvider == null) {
			buttonGroupItemProvider = new ButtonGroupItemProvider(this);
		}

		return buttonGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.ButtonToolbar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonToolbarItemProvider buttonToolbarItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.ButtonToolbar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonToolbarAdapter() {
		if (buttonToolbarItemProvider == null) {
			buttonToolbarItemProvider = new ButtonToolbarItemProvider(this);
		}

		return buttonToolbarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Dropdown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropdownItemProvider dropdownItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Dropdown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropdownAdapter() {
		if (dropdownItemProvider == null) {
			dropdownItemProvider = new DropdownItemProvider(this);
		}

		return dropdownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.ActionGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionGroupItemProvider actionGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.ActionGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionGroupAdapter() {
		if (actionGroupItemProvider == null) {
			actionGroupItemProvider = new ActionGroupItemProvider(this);
		}

		return actionGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Breadcrumbs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BreadcrumbsItemProvider breadcrumbsItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Breadcrumbs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBreadcrumbsAdapter() {
		if (breadcrumbsItemProvider == null) {
			breadcrumbsItemProvider = new BreadcrumbsItemProvider(this);
		}

		return breadcrumbsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.ListGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListGroupItemProvider listGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.ListGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListGroupAdapter() {
		if (listGroupItemProvider == null) {
			listGroupItemProvider = new ListGroupItemProvider(this);
		}

		return listGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Navs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavsItemProvider navsItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Navs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavsAdapter() {
		if (navsItemProvider == null) {
			navsItemProvider = new NavsItemProvider(this);
		}

		return navsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Navbar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavbarItemProvider navbarItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Navbar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavbarAdapter() {
		if (navbarItemProvider == null) {
			navbarItemProvider = new NavbarItemProvider(this);
		}

		return navbarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.TableRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableRowItemProvider tableRowItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.TableRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableRowAdapter() {
		if (tableRowItemProvider == null) {
			tableRowItemProvider = new TableRowItemProvider(this);
		}

		return tableRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.TableColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableColumnItemProvider tableColumnItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.TableColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableColumnAdapter() {
		if (tableColumnItemProvider == null) {
			tableColumnItemProvider = new TableColumnItemProvider(this);
		}

		return tableColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Tooltip} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TooltipItemProvider tooltipItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Tooltip}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTooltipAdapter() {
		if (tooltipItemProvider == null) {
			tooltipItemProvider = new TooltipItemProvider(this);
		}

		return tooltipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.InputGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputGroupItemProvider inputGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.InputGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputGroupAdapter() {
		if (inputGroupItemProvider == null) {
			inputGroupItemProvider = new InputGroupItemProvider(this);
		}

		return inputGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.FormGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormGroupItemProvider formGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.FormGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormGroupAdapter() {
		if (formGroupItemProvider == null) {
			formGroupItemProvider = new FormGroupItemProvider(this);
		}

		return formGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Collapse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollapseItemProvider collapseItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Collapse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollapseAdapter() {
		if (collapseItemProvider == null) {
			collapseItemProvider = new CollapseItemProvider(this);
		}

		return collapseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Modal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModalItemProvider modalItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Modal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModalAdapter() {
		if (modalItemProvider == null) {
			modalItemProvider = new ModalItemProvider(this);
		}

		return modalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.vinci.bootstrap.Accordion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccordionItemProvider accordionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.vinci.bootstrap.Accordion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccordionAdapter() {
		if (accordionItemProvider == null) {
			accordionItemProvider = new AccordionItemProvider(this);
		}

		return accordionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (tagItemProvider != null) tagItemProvider.dispose();
		if (divItemProvider != null) divItemProvider.dispose();
		if (linkActionGroupItemItemProvider != null) linkActionGroupItemItemProvider.dispose();
		if (contentActionGroupItemItemProvider != null) contentActionGroupItemItemProvider.dispose();
		if (actionGroupItemProvider != null) actionGroupItemProvider.dispose();
		if (alertItemProvider != null) alertItemProvider.dispose();
		if (badgeItemProvider != null) badgeItemProvider.dispose();
		if (breadcrumbsItemProvider != null) breadcrumbsItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (buttonGroupItemProvider != null) buttonGroupItemProvider.dispose();
		if (buttonToolbarItemProvider != null) buttonToolbarItemProvider.dispose();
		if (containerItemProvider != null) containerItemProvider.dispose();
		if (rowItemProvider != null) rowItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (cardItemProvider != null) cardItemProvider.dispose();
		if (dropdownItemProvider != null) dropdownItemProvider.dispose();
		if (formItemProvider != null) formItemProvider.dispose();
		if (listGroupItemProvider != null) listGroupItemProvider.dispose();
		if (navsItemProvider != null) navsItemProvider.dispose();
		if (navbarItemProvider != null) navbarItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (tableRowItemProvider != null) tableRowItemProvider.dispose();
		if (tableColumnItemProvider != null) tableColumnItemProvider.dispose();
		if (tooltipItemProvider != null) tooltipItemProvider.dispose();
		if (inputGroupItemProvider != null) inputGroupItemProvider.dispose();
		if (formGroupItemProvider != null) formGroupItemProvider.dispose();
		if (collapseItemProvider != null) collapseItemProvider.dispose();
		if (modalItemProvider != null) modalItemProvider.dispose();
		if (accordionItemProvider != null) accordionItemProvider.dispose();
	}

}
